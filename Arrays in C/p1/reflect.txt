*****************************************************************************
                               Reflection
                             Workshop - #6
Full Name  : Lorenz Alvin Tubo
Student ID#: 109934224

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************

Q1. I used the value of the variable "i" to connect similar arrays in this for loop.
for(i = 0; i < 3; i++)
{
printf("sample array 1 %d", sample1[i]);
printf("sample array 2 %d", sample2[i]);
}

the key for this array was the value of "i" because for every iteration 
of value "i" it will pull out the array value of the same number in the index
as long as the array was declared to hold up to a certain value for example if sample1
array was declared to hold up to sample1[10] it will pull out the value sample1[i] 10
times starting from i = 0;.

Q2. Its because arrays are almost always 0- based, even if u iterate the value i as 1
i = 1; in the for loop "for (i = 1; i < numberofItems; i++)" the priority[0],financing[0]
and price[0] even if not printed would still hold a value. so it is only logical to 
not waste any data. because if you would do array[11] = {0,11,22,33,44,55,66,77,88,99,1010};
 you would be spending computer memory for no reason.

 for (i = 0; i < numberofItems; i++)
    {
        printf("%3d  %5d    %5c    %11.2lf\n", i + 1, priority[i], financing[i], price[i]);
        total += price[i];
    }

Q3. an array is a group of the same type of variable. for example apples. an array is like a 
basket that holds the same data type "apples" its like for every basket they may or may not 
hold the same number of apples but they hold the same thing which is apples. it could be 
oranges bananas etc. aslong as they are the same variable type.
accessing an array would be the same as basket[0] basket [1] basket [2] they hold the same variable type 
or same object "apples" for example basket [0] has no apples. and if you have 2 dollars. your dollar
count would be dollar[0] dollar[1] dollar[2] because somedays you dont have money. so for example
on a day where u have 2 dollars. you can get the value of up to basket [2] if ur willing to spend 
dollar[2] but you could also spend only 1 dollar in which case you can get basket[1] for dollar [1].
in short how many dollars you have is equal to how many baskets u can connect to. 